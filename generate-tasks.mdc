---
description: Generate detailed, context-rich task lists from PRD and RFC with structured context summaries, explicit file references, and clear AI checkpoints.
globs:
alwaysApply: false
---
# Rule: Generate Context-Rich Task List from PRD and RFC

## Goal
Create a comprehensive, step-by-step, and context-rich task list in Markdown format using the feature's PRD and RFC. Ensure clarity and completeness by explicitly embedding context, file references, and checkpoints for continuous AI alignment.

## Input
- A reference to the PRD file (requirements, user stories).
- A reference to the RFC file (technical architecture, vertical slice strategy).

## Output
- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[feature-name].md`

## Process

### Phase 1: Analyze and Propose High-Level Tasks
1. **Receive References:** PRD and RFC.
2. **Analyze Documents:** Extract key vertical slices (not technical layers).
3. **Generate High-Level Tasks:**
   - First task is a minimal, end-to-end vertical slice.
   - Subsequent tasks enhance and polish the feature incrementally.
   - Keep tasks concise (4-7 tasks).
4. **Wait for User Confirmation:** Clearly ask, "These are the proposed high-level tasks. Reply 'Go' to proceed with detailed sub-tasks."

### Phase 2: Detailed Task and Sub-task Generation
Upon confirmation:

1. **Context Metadata Section:** Embed succinct summary metadata.
   ```markdown
   ## Context Summary

   | Context Item        | Description                                |
   |---------------------|--------------------------------------------|
   | Feature             | [Feature Name]                              |
   | PRD                 | [Link to PRD]                               |
   | RFC                 | [Link to RFC]                               |
   | Vertical Slice      | [Order and description of current slice]    |
   | Tech Stack          | [Tech stack from RFC]                       |
   | Dependencies        | [Prerequisites or completed tasks needed]   |
   ```

2. **Completed Tasks Section:** Maintain a brief summary of already completed tasks.
   ```markdown
   ## Completed Tasks ✅

   - **1.0 Initial vertical slice:** Basic end-to-end setup
   - **2.0 Expanded functionality:** UI and backend enhancements

   _Current Task: Task 3.0 (Feature Persistence)_
   ```

3. **Generate Detailed Sub-Tasks:** Each task explicitly includes:
   - Clear sub-task definitions with precise action.
   - Embedded contextual reminders or prompts.
   - Explicit file paths and relevance.

   ```markdown
   ## Tasks

   - [ ] **3.0 Implement Feature Persistence**
     _Description:_ Persist uploaded files to AWS S3.

     - [ ] **3.1 Backend:** Integrate AWS S3 storage in `api/upload.ts`.
       - **Context Reminder:** Refer to RFC "Architecture" and "Network Interactions" sections.
       - **Files:** `api/upload.ts` (API handler), `lib/aws/s3Client.ts` (S3 helper).

     - [ ] **3.2 Backend:** Update API route to store files in S3.
       - **Context Reminder:** Verify environment variables in `.env.local`.
       - **Files:** `api/upload.ts`

     - [ ] **3.3 Tests:** Write integration tests for S3 upload.
       - **Context Reminder:** Mock AWS SDK clearly using Jest.
       - **Files:** `tests/api/upload.test.ts`

     - **AI Checkpoint:** Confirm integration tests pass locally. If unclear, pause and request clarification.
   ```

4. **Relevant Files Section:** Clearly list all relevant files at the sub-task level, justifying relevance.
   ```markdown
   ## Relevant Files

   - `pages/upload.tsx` – Frontend UI component.
   - `api/upload.ts` – Backend route handling file upload to AWS S3.
   - `lib/aws/s3Client.ts` – AWS S3 helper functions.
   - `tests/api/upload.test.ts` – Integration tests for upload.
   ```

5. **Notes Section:** Provide additional guidelines.
   ```markdown
   ### Notes

   - Run tests using the project command (`npx jest`).
   - Use Context7 to access documentation for unfamiliar libraries.
   - Confirm environment variables are configured before integration tests.
   - Each task completion should deliver an incrementally functional vertical slice.
   ```

## Interaction Model
- Pause explicitly after high-level tasks for user confirmation.
- Include explicit AI checkpoints after significant subtasks or integrations to ensure alignment.
- AI prompts for clarification proactively whenever needed to maintain context accuracy and task clarity.
